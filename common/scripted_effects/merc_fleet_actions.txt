###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# THIS must be an op fleet
merc_fleet_maybe_go_hostile = {
	if = { limit = { merc_any_system_target = yes }
		# We are in the same solar system, so make sure we turn aggressive
		log = "We are in the same solar system,"
		set_fleet_stance = aggressive

		# Debug scope printing standard
		if = { limit = { has_global_flag = "debug" }
			log = "merc_fleet_maybe_go_hostile Owner: [Owner.GetName]"
			log = "merc_fleet_maybe_go_hostile Target county is: [merc_country.GetName]"		
		}
		
		# Additional check to prevent # Undefined event target: merc_country
		if = {
			limit = {
				exists = event_target:merc_country				
			}
			#log = "merc_fleet_maybe_go_hostile event_target:merc_country [merc_country.GetName]"
			
			# Check if the owner is hostile to us
			if = { limit = { event_target:merc_country = { NOT = { is_hostile = PREV.owner } } }
				# We need to turn hostile vs them

				owner = {
					# Turn hostile when we find our first target,
					# unless they are already hostile towards us.
					set_faction_hostility = {
						target = event_target:merc_country
						set_hostile = yes }
				}
			}
		}
	}
}

merc_fleet_arrived = {
	owner = {
		switch = {
			trigger = has_country_flag
			merc_op_dock = { ROOT = { merc_stage3_fleet_arrived_dock = yes } }
			merc_op_liberate = { ROOT = { merc_stage3_fleet_arrived_liberate = yes } }
			merc_op_spaceport = { ROOT = { merc_stage3_fleet_arrived_generic = yes } }
			merc_op_civilian = { ROOT = { merc_stage3_fleet_arrived_generic = yes } }
			merc_op_military = { ROOT = { merc_stage3_fleet_arrived_generic = yes } }
			merc_op_clear = { ROOT = { merc_stage3_fleet_arrived_generic = yes } }
		}
	}
}

merc_fleet_move_generic = {
	ROOT = {
		queue_actions = {
			repeat = {
				while = {
					id = mercMoveGeneric.1
					NOT = { is_fleet_idle = yes }
				}
				# We need to update the move_to periodically, because the
				# initial move_to command moves to a fixed system point, and
				# does not update to reflect the current location of the target
				# ZZZ Actually, I'm not sure this works.
				# I think PREV might be a copy of the scope as it was when
				# merc_fleet_move_generic was invoked.
				move_to = PREV
				wait = 14
			}
			effect = {
				id = mercMoveGeneric.2
				merc_fleet_arrived = yes
			}
		}
	}
}

#old  integrated mercMovePlanet.1
#Prev: Pirate Squadron
#merc_current_target: Malggu
#This: Malggu
merc_fleet_move_planet = {

	ROOT = {
		queue_actions = {
			#orbit_planet = PREV
			orbit_planet = event_target:merc_current_target
			repeat = {
				while = {
					id = mercMovePlanet.1
					exists = event_target:merc_current_target
					NOT = { exists = orbit }
					NOT = { owner = { has_country_flag = "fmerc_ops_completed" } }
				}
				orbit_planet = event_target:merc_current_target
				wait = 4
			}
			effect = {
				id = mercMovePlanet.2
				merc_fleet_arrived = yes
			}
		}
	}
}

###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# Stage 4 = operation is complete, or abort

merc_stage4_additional_costs = {
	switch = {
		trigger = has_country_flag
		merc_op_clear = { merc_stage4_additional_costs_clear = yes }
	}
}

merc_stage4_destroy = {

	log = "Shutting down."

	merc_set_buyer = yes
	merc_set_country = yes

	if = {
		limit = {
			exists = event_target:merc_buyer
		}
		merc_stage4_additional_costs = yes		
	}

	# Debug scope printing standard and targets
	if = { limit = { has_global_flag = "debug" }
		log = "merc_stage4_destroy Printing the current scopes (merc_stage4_destroy) -"
		print_scope_effect = yes
		target_scopes_log = yes
	}	
	
	if = {
		limit = { merc_is_country_target_valid = yes }
		event_target:merc_country = {
			remove_country_flag = "fmerc_operations_target"
			every_owned_ship = {
				limit = { has_ship_flag = "merc_target" }
				remove_ship_flag = "merc_target"
			}
			every_owned_planet = {
				limit = { has_planet_flag = "merc_target" }
				remove_planet_flag = "merc_target"
			}
		}
	}

	#  It was moved it upper, because mercMenu.9004 will have wrong scope If fleet will be deleted
	event_target:merc_buyer = {
		remove_country_flag = "fmerc_active_operation"
		remove_country_flag = "fmerc_calculated_costs"
		country_event = {
			id = mercMenu.9004
		}
	}

	if = {
		limit = { count_owned_ships { count > 0 } }
		every_owned_fleet = {
		
			log = "merc_stage4_destroy every_owned_fleet clear and destroy"
			
			clear_fleet_actions = this
			delete_fleet = this
		}
	}

	merc_check_detection = yes
	destroy_country = yes
}


# All effects below check this first
merc_stage4_verify_operation_ongoing = {
	if = { limit = { has_country_flag = "merc_op_dock" }
		log = "flag = merc_op_dock exist --> merc_stage4_destroy = yes, break"	
		merc_stage4_destroy = yes
		break = yes
	}
}

# Abruptly abort operation, regardless.
merc_stage4_abort = {

	merc_stage4_verify_operation_ongoing = yes

	log = "Forcefully aborting operations. (merc_stage4_abort)"

	merc_stage4_complete = yes
}

# Normally This: is Mercenary Operations - but not always
merc_stage4_complete = {
	log = "Operation complete. (merc_stage4_complete)"
	merc_stage4_verify_operation_ongoing = yes

	set_faction_hostility = { set_hostile = no }

	merc_set_buyer = yes
	merc_set_country = yes

	# Debug scope printing standard and target
	if = { limit = { has_global_flag = "debug" }
		target_scopes_log = yes
		print_scope_effect = yes
	}

	if = {
		limit = { count_owned_ships { count > 0 } }

		log = "event_target:mercenary_operations seems exist, and count_owned_ships > 0 [This.count] "
		
		merc_ensure_harbor = yes

		event_target:merc_harbor = { save_event_target_as = merc_current_target }

		set_country_flag = "merc_op_dock"
		
		# Debug scope printing standard and target
		if = { limit = { has_global_flag = "debug" }
			target_scopes_log = yes
			print_scope_effect = yes
		}
		
		every_owned_fleet = {
			clear_fleet_actions = this
			fleet_event = { id = mercControllerFleet.100 }
		}

		else = {
			merc_stage4_destroy = yes
		}
	}
}

# IF Mercenary Operations does not exist, we need another event that will not delete all players fleet and bases.
merc_stage4_no_target_abort = {

	log = "Operation complete beacuse target country was not find"
	
	merc_stage4_verify_operation_ongoing = yes

	set_faction_hostility = { set_hostile = no }

	merc_set_buyer = yes
	merc_set_country = yes

	# Debug scope printing standard and target
	if = { limit = { has_global_flag = "debug" }
		target_scopes_log = yes
		print_scope_effect = yes
		
		if = {
			limit = { NOT = { exists = event_target:merc_country } }

			log = "event_target:merc_country does not exist."
			
		}
	}

	if = {
		limit = { 
			NOT = {exists = event_target:mercenary_operations}
			}
		log = "event_target:mercenary_operations DOES NOT EXIST"	

		remove_country_flag = "fmerc_active_operation"
		remove_country_flag = "fmerc_calculated_costs"
		country_event = {
			id = mercMenu.9005
		}		
	}
			
	if = {
		limit = {
			exists = event_target:mercenary_operations
			event_target:mercenary_operations = {
				count_owned_ships = {
					count > 0
				}
			}
		}		
		
		merc_ensure_harbor = yes

		event_target:merc_harbor = { save_event_target_as = merc_current_target }
		
		log = "target_abort Returning mercenary fleets to dock ... current_target: [merc_current_target.GetName]"
			
		set_country_flag = "merc_op_dock"

		# Debug scope printing standard and target
		if = { limit = { has_global_flag = "debug" }
			log = "Printing the current scopes (merc_stage4_no_target_abort) -"
			target_scopes_log = yes
			print_scope_effect = yes
		}
			
		every_owned_fleet = {
			clear_fleet_actions = this
			fleet_event = { id = mercControllerFleet.100 }
		}
		
		else = {
			if = {
				limit = { exists = event_target:mercenary_operations }

				merc_stage4_destroy = yes
				
			}
		}
	}	
}

# Subtract success chance and see if we should try again.
merc_stage4_failed = {
	merc_stage4_verify_operation_ongoing = yes

	subtract_variable = { which = "MercSuccess" value = 25 }
	if = { limit = { check_variable = { which = "MercSuccess" value > 90 } }
		random = { chance = 95 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 80 } }
		random = { chance = 85 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 70 } }
		random = { chance = 75 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 60 } }
		random = { chance = 65 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 50 } }
		random = { chance = 55 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 40 } }
		random = { chance = 45 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 30 } }
		random = { chance = 35 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 20 } }
		random = { chance = 25 set_country_flag = "fmerc_retry_operation" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 10 } }
		random = { chance = 15 set_country_flag = "fmerc_retry_operation" }
	} } } } } } } } } } } } } } } } }

	if = {
		limit = { has_country_flag = "fmerc_retry_operation" }
		remove_country_flag = "fmerc_retry_operation"
		log = "Operation failed: Success chance was [this.MercSuccess]%, and the RNG was in our favor."
		merc_stage4_restart = yes

		else = {
			log = "Operation failed: Aborting due to low success factor ([this.MercSuccess])"
			merc_stage4_abort = yes
			set_country_flag = "fmerc_ops_completed"
		}
	}
}

# This is invoked by fleets when they think their operation might be complete
merc_stage4_maybe_complete = {
	merc_stage4_verify_operation_ongoing = yes

	if = { limit = { check_variable = { which = "MercTargetCount" value > 0.9 } }
		# We are not done, so find next target and get to it
		merc_stage4_restart = yes
	else = {
		merc_stage4_complete = yes
		set_country_flag = "fmerc_ops_completed"
	} }
}

merc_stage4_restart = {
	merc_stage4_verify_operation_ongoing = yes
	log = "Restarting operations, target count is [this.MercTargetCount]."

	merc_set_country = yes
	merc_set_buyer = yes
	merc_get_target = yes

	if = { limit = { NOT = { has_country_flag = "merc_found_target" } }
		log = "Restart: Did not find any existing targets, so forced to mark new ones."
		merc_set_new_targets = yes
	}

	merc_verify_current_target = yes
	merc_stage2_operation_start = yes
}

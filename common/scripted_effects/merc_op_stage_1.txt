###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# STAGE 1
# - Initiated from the diplomacy screen
# - ROOT/THIS must be the buyer country for all stage1 effects
# - last_created_country is always the new mercenary operations country
#   created immediately in stage 1 init

fmerc_stage1_copy_detection = {
	last_created_country = { set_variable = { which = "MercDetect" value = 0 } }
	# ZZZ works because mercdetect is never above 100
	while = {
		limit = { check_variable = { which = "MercDetect" value > 0 } }
		subtract_variable = { which = "MercDetect" value = 1 }
		last_created_country = { change_variable = { which = "MercDetect" value = 1 } }
	}
}

fmerc_stage1_copy_success = {
	last_created_country = { set_variable = { which = "MercSuccess" value = 0 } }
	# ZZZ works because MercSuccess is never above 100
	while = {
		limit = { check_variable = { which = "MercSuccess" value > 0 } }
		subtract_variable = { which = "MercSuccess" value = 1 }
		last_created_country = { change_variable = { which = "MercSuccess" value = 1 } }
	}
}

merc_stage1_copy_country_type = {
	switch = {
		trigger = has_country_flag
		merc_country_type_generic = { last_created_country = { set_country_flag = "merc_country_type_generic" } }
		merc_country_type_fallen = { last_created_country = { set_country_flag = "merc_country_type_fallen" } }
		merc_country_type_hivemind = { last_created_country = { set_country_flag = "merc_country_type_hivemind" } }
		merc_country_type_unbidden = { last_created_country = { set_country_flag = "merc_country_type_unbidden" } }
		merc_country_type_synthetic = { last_created_country = { set_country_flag = "merc_country_type_synthetic" } }
	}
}

fmerc_stage1_culture_copy = {
	switch = {
		trigger = graphical_culture
		arthropoid_01 = { last_created_country = { set_graphical_culture = "arthropoid_01" } }
		avian_01 = { last_created_country = { set_graphical_culture = "avian_01" } }
		fungoid_01 = { last_created_country = { set_graphical_culture = "fungoid_01" } }
		mammalian_01 = { last_created_country = { set_graphical_culture = "mammalian_01" } }
		molluscoid_01 = { last_created_country = { set_graphical_culture = "molluscoid_01" } }
		plantoid_01 = { last_created_country = { set_graphical_culture = "plantoid_01" } }
		reptilian_01 = { last_created_country = { set_graphical_culture = "reptilian_01" } }
		ai_01 = { last_created_country = { set_graphical_culture = "merc_ai" } }
		extra_dimensional_01 = { last_created_country = { set_graphical_culture = "merc_ed" } }
		extra_dimensional_02 = { last_created_country = { set_graphical_culture = "merc_ed" } }
		extra_dimensional_03 = { last_created_country = { set_graphical_culture = "merc_ed" } }
		fallen_empire_01 = { last_created_country = { set_graphical_culture = "merc_fallen" } }
		fallen_empire_02 = { last_created_country = { set_graphical_culture = "merc_fallen" } }
		fallen_empire_03 = { last_created_country = { set_graphical_culture = "merc_fallen" } }
		fallen_empire_04 = { last_created_country = { set_graphical_culture = "merc_fallen" } }
		fallen_machine_empire_01 = { last_created_country = { set_graphical_culture = "merc_fallen" } }
		pirate_01 = { last_created_country = { set_graphical_culture = "merc_pirate" } }
		swarm_01 = { last_created_country = { set_graphical_culture = "merc_swarm" } }
		ancient_drone_01 = { last_created_country = { set_graphical_culture = "merc_drone" } }
		drone = { last_created_country = { set_graphical_culture = "merc_drone" } }
		ancient = { last_created_country = { set_graphical_culture = "merc_drone" } }
		techno = { last_created_country = { set_graphical_culture = "mammalian_01" } }
	}
}

# scope is the buyer country
merc_stage_1_apply_disguise = {
	# Culture is already set to a random one.
	switch = {
		trigger = has_country_flag
		# XXX Add option to disguise as target.
		merc_disguise_nonbuyer = {
			# And then just verify that it's not the same
			# The reason we can't use a while loop is because repeated invokes
			# to random/random_list produces the same result.
			if = {
				limit = {
					switch = {
						trigger = graphical_culture
						arthropoid_01 = { last_created_country = { graphical_culture = "arthropoid_01" } }
						avian_01 = { last_created_country = { graphical_culture = "avian_01" } }
						fungoid_01 = { last_created_country = { graphical_culture = "fungoid_01" } }
						mammalian_01 = { last_created_country = { graphical_culture = "mammalian_01" } }
						molluscoid_01 = { last_created_country = { graphical_culture = "molluscoid_01" } }
						plantoid_01 = { last_created_country = { graphical_culture = "plantoid_01" } }
						reptilian_01 = { last_created_country = { graphical_culture = "reptilian_01" } }
						ai_01 = { last_created_country = { graphical_culture = "merc_ai" } }
						extra_dimensional_01 = { last_created_country = { graphical_culture = "merc_ed" } }
						extra_dimensional_02 = { last_created_country = { graphical_culture = "merc_ed" } }
						extra_dimensional_03 = { last_created_country = { graphical_culture = "merc_ed" } }
						fallen_empire_01 = { last_created_country = { graphical_culture = "merc_fallen" } }
						fallen_empire_02 = { last_created_country = { graphical_culture = "merc_fallen" } }
						fallen_empire_03 = { last_created_country = { graphical_culture = "merc_fallen" } }
						fallen_empire_04 = { last_created_country = { graphical_culture = "merc_fallen" } }
						fallen_machine_empire_01 = { last_created_country = { graphical_culture = "merc_fallen" } }
						pirate_01 = { last_created_country = { graphical_culture = "merc_pirate" } }
						swarm_01 = { last_created_country = { graphical_culture = "merc_swarm" } }
						ancient_drone_01 = { last_created_country = { graphical_culture = "merc_drone" } }
						drone = { last_created_country = { graphical_culture = "merc_drone" } }
						ancient = { last_created_country = { graphical_culture = "merc_drone" } }
						techno = { last_created_country = { graphical_culture = "mammalian_01" } }
					}
				}
				set_graphical_culture = "merc_drone"
			}
		}
		merc_disguise_buyer = {
			# Same as ROOT
			fmerc_stage1_culture_copy = yes
		}
		merc_disguise_pirate = {
			last_created_country = { set_graphical_culture = "merc_pirate" }
		}
		merc_disguise_xenofauna = {
			last_created_country = {
				random_list = {
					1 = { set_graphical_culture = "merc_whale" }
					1 = { set_graphical_culture = "merc_cloud" }
					1 = { set_graphical_culture = "merc_amoeba" }
					1 = { set_graphical_culture = "merc_crystal" }
					1 = { set_graphical_culture = "merc_drone" }
				}
			}
		}
	}
}

fmerc_stage1_setup_clear = {
	# The "clear space" operations do not set relation flag until stage 2.
	# Culture is already set to a random one.
}

# THIS is the operations country
# event_target:mercenaries is the enclave
fmerc_stage1_determine_ship_powers = {
	# So, every time we create a new fmerc_operations country, their ship
	# designs are different, because of the DESIGNER_WEAPON_STACKING_DIV
	# and other defines. There could also be other reasons that I don't see.
	#
	# Anyway, the result is we need to spawn one of each ship to determine
	# how many ships we need to spawn later to match the target. And we need
	# to do this every time we create a new operations country.

	# Get a location to spawn in. This doesn't need to be safe, because our
	# fleets will be created and destroyed instantly, and never show ingame.
	event_target:mercenaries = {
		random_owned_fleet = { save_event_target_as = spawn }
	}
	# FROM here should be the merc enclave itself, and event_target:mercenaries

	# CORVETTE
	create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
	fmerc_stage3_spawn_corvette = yes
	last_created_fleet = { merc_shameful_get_design_power = yes }
	set_variable = { which = "CorvettePower" value = "MercDesignPower" }
	set_variable = { which = "MercDesignPower" value = 0 }
	last_created_fleet = { delete_fleet = THIS }

	if = { limit = { check_variable = { which = "CorvettePower" value = 0 } }
		# We need to use the global designs
		set_country_flag = "merc_use_global_designs"
		log = "ERROR: No valid Corvette designs in operations country, using global designs."

		# CORVETTE
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_fixed_corvette = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "CorvettePower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

		# DESTROYER
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_fixed_destroyer = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "DestroyerPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

		# CRUISER
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_fixed_cruiser = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "CruiserPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

		# BATTLESHIP
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_fixed_battleship = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "BattleshipPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

	else = {
		# DESTROYER
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_destroyer = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "DestroyerPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

		# CRUISER
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_cruiser = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "CruiserPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }

		# BATTLESHIP
		create_fleet = { effect = { set_owner = PREV set_location = event_target:spawn } }
		fmerc_stage3_spawn_battleship = yes
		last_created_fleet = { merc_shameful_get_design_power = yes }
		set_variable = { which = "BattleshipPower" value = "MercDesignPower" }
		set_variable = { which = "MercDesignPower" value = 0 }
		last_created_fleet = { delete_fleet = THIS }
	} }

	# 4 corvettes to every destroyer
	set_variable = { which = "DestroyerSquad" value = "DestroyerPower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }

	# 2 destroyers to every cruiser
	set_variable = { which = "CruiserSquad" value = "CruiserPower" }
	change_variable = { which = "CruiserSquad" value = "DestroyerSquad" }
	change_variable = { which = "CruiserSquad" value = "DestroyerSquad" }

	# 4 cruisers to every battleship
	set_variable = { which = "BattleshipSquad" value = "BattleshipPower" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }

	# Some of these might be zero, if there was no valid design.
	# In which case we won't use that type later.
	log = "Ship Pwr: B=[this.BattleshipPower]  C=[this.CruiserPower]  D=[this.DestroyerPower] C=[this.CorvettePower]."
	log = "Squadron: B=[this.BattleshipSquad] C=[this.CruiserSquad] D=[this.DestroyerSquad] C=[this.CorvettePower]."

}

fmerc_stage1_create_mercenaries = {
	create_country = {
		name = "Mercenary Operations"
		name_list = "FMercenaries"
		type = fmerc_operations
		species = ROOT.owner_species
		flag = { # Pirate flag copy from pirate_events
			icon = {
				category = "pirate"
				file = "flag_pirate_7.dds"
			}
			background = {
				category = "backgrounds"
				file = "00_solid.dds"
			}
			colors = {
				"red"
				"red"
				"null"
				"null"
			}
		}
		ethos = {
			ethic = ethic_militarist
			ethic = ethic_materialist
		}
		civics = {
			civic = civic_mercenary_operations
		}
		authority = auth_dictatorial
		auto_delete = no
		ignore_initial_colony_error = yes
		day_zero_contact = no
		
		
	}
	last_created_country = {
		establish_communications_no_message = ROOT
		establish_contact = { who = ROOT }
		establish_communications_no_message = event_target:mercenaries
		establish_contact = { who = event_target:mercenaries }
		
		# Added to fix bug with merc_stage4_complete
		# we need to check if country still exist and if we have scope to remove flags, if mission was aborted
		# in stage merc_stage4_complete we can face problem if fleet was destroyed or we lost scope (clear_space)
		
		save_event_target_as = mercenary_operations
	}
    
	log = "Mercenary Operations created: [mercenary_operations.GetName]"
	
	# ZZZ Orbital bombardment clusterfuck
	# This would be nice, but it stops orbital bombardment from working at all
	# Surely there must be a way without declaring actual war of having
	# orbital bombardment working.
	#if = {
	#	limit = { event_target:merc_country = { has_communications = event_target:mercenaries } }
	#	last_created_country = { establish_communications_no_message = event_target:merc_country }
	#}
}

# event_target:merc_country should be set before this
# but it might not be, in which case we just abort operation immediately
# Scope is the buyer country
fmerc_init_stage1 = {
	# If we're doing a clear operation, the country target doesn't necessarily
	# exist. This effect then aborts the operation immediately.
	merc_verify_country = yes

	event_target:merc_country = { set_country_flag = "fmerc_operations_target" }

	log = "Stage 1: Buyer = [Root.GetName], target country = [merc_country.GetName]."

	fmerc_stage1_create_mercenaries = yes

	last_created_country = {
		copy_techs_from = {
			target = ROOT
			except = { tech_akx_worm_1 } # Errors without any
		}
		if = {
			limit = {
				event_target:merc_country = { merc_is_generic = yes }
			}
			copy_techs_from = {
				target = event_target:merc_country
				except = { tech_akx_worm_1 } # Errors without any
			}
		}
		# Just make sure we have access to all 4 vanilla ship types

		give_technology = { tech = tech_starbase_1 message = no }
		give_technology = { tech = tech_starbase_2 message = no }
		give_technology = { tech = tech_starbase_3 message = no }
		give_technology = { tech = tech_starbase_4 message = no }
		give_technology = { tech = tech_starbase_5 message = no }

		# We need this so that we have any drive with a higher priority
		# than WORMHOLE_DRIVE.
		# give_technology = { tech = tech_warp_drive_1 message = no }
		# give_technology = { tech = tech_warp_drive_2 message = no }

		give_technology = { tech = tech_jump_drive_1 message = no }

		# Hopefully this will force the ship designs to update, if they
		# haven't already.
		give_technology = { tech = tech_mercenary_enclave }

		fmerc_stage1_determine_ship_powers = yes

		# ZZZ Does not apply to created fleets for some reason
		set_policy = {
			policy = orbital_bombardment
			option = orbital_bombardment_armageddon		#	 updated for version 2.0
			cooldown = no
		}

		# ZZZ 5-year operation time limit
		set_timed_country_flag = {
			flag = "fmerc_ops_timeout"
			days = 1800
			#days = 20
		}

		set_relation_flag = {
			who = ROOT
			flag = merc_operations_squad
		}

		# this makes it show in the contact list,
		# but at the same time it prevents the operations squad from engaging
		# the enclave
		set_subject_of = {
			who = event_target:mercenaries
			subject_type = mercsquad
		}

		set_relation_flag = {
			who = event_target:merc_country
			flag = merc_operations_target
		}

		random_list = {
			1 = { set_graphical_culture = "arthropoid_01" }
			1 = { set_graphical_culture = "avian_01" }
			1 = { set_graphical_culture = "fungoid_01" }
			1 = { set_graphical_culture = "mammalian_01" }
			1 = { set_graphical_culture = "molluscoid_01" }
			1 = { set_graphical_culture = "plantoid_01" }
			1 = { set_graphical_culture = "reptilian_01" }
			1 = { set_graphical_culture = "merc_ai" }
			1 = { set_graphical_culture = "merc_ed" }
			1 = { set_graphical_culture = "merc_fallen" }
			1 = { set_graphical_culture = "merc_pirate" }
			1 = { set_graphical_culture = "merc_swarm" }
			1 = { set_graphical_culture = "merc_whale" }
			1 = { set_graphical_culture = "merc_cloud" }
			1 = { set_graphical_culture = "merc_amoeba" }
			1 = { set_graphical_culture = "merc_crystal" }
			1 = { set_graphical_culture = "merc_drone" }
		}

		# Default 3 targets
		set_variable = { which = "MercTargetCount" value = 3 }
	}

	fmerc_stage1_copy_success = yes
	fmerc_stage1_copy_detection = yes
	merc_stage1_copy_country_type = yes

	# ZZZ Remember to keep a 2 day delay, minimum, so that the fake fleets
	# ZZZ are deleted before the mission begins. Not that it should be
	# ZZZ problematic, but there's no reason for it either.
	switch = {
		trigger = has_country_flag
		merc_op_spaceport = {
			merc_stage_1_apply_disguise = yes
			last_created_country = {
				set_country_flag = "merc_op_spaceport"
				subtract_variable = { which = "MercTargetCount" value = 2 }
				country_event = { id = mercOpsMeta.1 days = 3 random = 70 }
			}
		}
		merc_op_liberate = {
			merc_stage_1_apply_disguise = yes
			last_created_country = {
				set_country_flag = "merc_op_liberate"
				subtract_variable = { which = "MercTargetCount" value = 2 }
				country_event = { id = mercOpsMeta.1 days = 3 random = 70 }
			}
		}
		merc_op_civilian = {
			merc_stage_1_apply_disguise = yes
			last_created_country = {
				set_country_flag = "merc_op_civilian"
				# XXX Randomly adjust MercTargetCount slightly.
				change_variable = { which = "MercTargetCount" value = 2 }
				country_event = { id = mercOpsMeta.1 days = 3 random = 70 }
			}
		}
		merc_op_military = {
			merc_stage_1_apply_disguise = yes
			last_created_country = {
				set_country_flag = "merc_op_military"
				subtract_variable = { which = "MercTargetCount" value = 2 }
				country_event = { id = mercOpsMeta.1 days = 3 random = 70 }
			}
		}
		merc_op_clear = {
			last_created_country = {
				set_country_flag = "merc_op_clear"
				# We delay by 3 days so that we don't invoke the controller
				# or other events/effects on the fleet-power calculation
				# fake fleets.
				# I've tried setting it to 1 day, but they still exist then.
				country_event = { id = mercOpsMeta.1 days = 3 }
			}
		}
	}
}

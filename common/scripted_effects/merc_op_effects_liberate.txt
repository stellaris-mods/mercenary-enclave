###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# These effects are only used by the liberate operation type


merc_set_found_target_liberate = {
	set_planet_flag = "merc_target"
	PREVPREV = { set_country_flag = "merc_found_target" }
}

# THIS is op country
merc_set_target_liberate = {
	event_target:merc_country = {
		random_owned_planet = { limit = { merc_liberate_p1 = yes }
			log = "Liberate target [this.GetName] (P1)"
			merc_set_found_target_liberate = yes
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p2 = yes }
				log = "Liberate target [this.GetName] (P2)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p3 = yes }
				log = "Liberate target [this.GetName] (P3)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p4 = yes }
				log = "Liberate target [this.GetName] (P4)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p5 = yes }
				log = "Liberate target [this.GetName] (P5)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p6 = yes }
				log = "Liberate target [this.GetName] (P6)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p7 = yes }
				log = "Liberate target [this.GetName] (P7)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p8 = yes }
				log = "Liberate target [this.GetName] (P8)"
				merc_set_found_target_liberate = yes
			}
		}
		if = { limit = { merc_needs_target = yes }
			random_owned_planet = { limit = { merc_liberate_p9 = yes }
				log = "Liberate target [this.GetName] (P9)"
				merc_set_found_target_liberate = yes
			}
		}
	}
}

merc_verify_fleet_liberate_target_status = {
	if = { limit = { event_target:merc_current_target = { merc_is_still_valid_for_liberate = no } }
		log = "FAILED: [merc_current_target.GetName] is no longer valid for liberate."
		owner = { merc_stage4_failed = yes }
		break = yes
	}
}

merc_verify_fleet_orbit = {
	if = { limit = { NOT = { exists = orbit } }
		log = "ERROR: [this.GetName] is not in orbit of anything."
		owner = { merc_stage4_failed = yes }
		break = yes
	}
}

# THIS and ROOT is the fleet
# PREV is owner
merc_stage3_init_fleet_liberate = {
	# In case we are in the same system as our target
	log = "merc_stage3_init_fleet_liberate started"
	merc_fleet_maybe_go_hostile = yes
	merc_verify_fleet_liberate_target_status = yes
	event_target:merc_current_target = { merc_fleet_move_planet = yes }
}

merc_stage3_fleet_arrived_liberate = {


	log = "merc_stage3_fleet_arrived_liberate started"


	# check distance to target
	merc_verify_fleet_orbit = yes

	orbit = { save_event_target_as = merc_current_target }

	# verify target status
	merc_verify_fleet_liberate_target_status = yes

	# Debug scope printing standard
	if = { limit = { has_global_flag = "debug" }
		target_scopes_log = yes
	}
	

	if = {
		limit = {
			any_country = {
				has_relation_flag = {
					flag = fmerc_liberate_rebels
					who = PREVPREV.owner 
				}
			}
		}
		# XXX I don't think this will ever happen.
		log = "And we found an existing rebel country, so creating new armies."
		# The rebel country exists, so create more armies
		random_country = {
			limit = {
				has_relation_flag = {
					flag = fmerc_liberate_rebels
					who = PREVPREV.owner 
				}
			}
			save_event_target_as = tmp_army_country
		}
		event_target:merc_current_target = {
			while = {
				count = 20
				random = {
					chance = 80
					create_army = {
						name = "Hired Rebels"
						owner = event_target:tmp_army_country
						species = event_target:merc_buyer
						type = "rebel_slave_defense_army"  # defense_army will just disapear
					}
				}
			}
		}
		else = {
			# The rebel country does NOT exist, so create a new one
			event_target:merc_current_target = {          # Planet !!!
				create_rebels = {
					name = random
					ethos = event_target:merc_buyer
					authority = event_target:merc_buyer
					civics = random
					species = event_target:merc_country
					name_list = event_target:merc_country
					flag = random
					# auto_delete = no # much easier if the country is just destroyed every time they lose
					effect = {
						set_country_flag = "fmerc_liberate_rebels"
						# This is weird; it seems that when the rebels win,
						# this country is immediately turned into a "default" one,
						# and so anyone that had contact with them is notified by
						# vanilla event action.61. Try to prevent that.
						set_country_flag = "silence_destroy_event"
						# ZZZ
						# event target only for create_army below.
						# I don't know if last_created_country works with
						# create_rebels, and I don't want to run it even once
						# to find out.
						save_event_target_as = tmp_army_country
						establish_communications_no_message = PREVPREV.owner # merc operations
						establish_communications_no_message = event_target:merc_country
						set_relation_flag = {
							flag = fmerc_liberate_rebels
							who = PREVPREV.owner     # merc operations ?
						}
						log = "liberation flag <fmerc_liberate_rebels> set between [tmp_army_country.GetName] and [Prev.Prev.owner.GetName] country"
					}
				}
				fmerc_liberate_create_armies = yes

				# Perfect variant for testing if rebels exist
				# create_army = {
					# name = "NAME_Enraged_Titan"
					# owner = event_target:tmp_army_country
					# species = event_target:tmp_army_country
					# type = "titanic_guardian_army"
				# }

			}
		}
	}
}

merc_liberate_fix_species = {
	if = { limit = { last_created_species = { has_trait = trait_cybernetic } }
		modify_species = {
			species = this
			remove_trait = trait_cybernetic
		}
	}
	if = { limit = { last_created_species = { has_trait = trait_latent_psionic } }
		modify_species = {
			species = this
			remove_trait = trait_latent_psionic
		}
	}
	if = { limit = { last_created_species = { has_trait = trait_psionic } }
		modify_species = {
			species = this
			remove_trait = trait_psionic
		}
	}
	modify_species = {
		species = this
		ideal_planet_class = ROOT
	}
	change_dominant_species = { species = last_created }
}

#GARRISON_SIZE_BASE					= 2			# Planet always spawns this number of garrisons
#GARRISON_SIZE_MULT					= 0.4		# Per pop over 1

# Scope should be planet
# event_target:tmp_army_country gets the new armies
# ROOT needs to be the mercenary country
# event_target:merc_buyer must be set

fmerc_liberate_create_armies = {
	ROOT = {
		set_variable = {
			which = "MercLiberateArmyCount"
			value = 3 #GARRISON_SIZE_BASE + 1
		}
	}
	every_owned_pop = { # only loops the ones on planet
		ROOT = {
			# There is a chance this should be multiply_variable by 1.4
			# There is also a chance it should be multiply_variable by ( 1 + ( num_pops * 0.4 ) )
			# But it probably isn't, it's probably 0.4 armies per pop.
			change_variable = {
				which = "MercLiberateArmyCount"
				value = 0.4 # GARRISON_SIZE_MULT
			}
		}
	} # There are some army types we dont respond to, because I think they should give a defense advantage

	# Since switch{} on army_type does not properly trigger default{} for an
	# unmatched case, but _errors_ instead, we need to use an if-else-if block.
	# For fucks sake.
	# [21:44:59][trigger_impl.cpp:8524]: Error in army_type trigger, cannot find Army Type
	every_planet_army = {
		if = { limit = { army_type = assault_army } fmerc_assault_army = yes
		else = { if = { limit = { army_type = slave_army } fmerc_slave_army = yes
		else = { if = { limit = { army_type = clone_army } fmerc_clone_army = yes
		else = { if = { limit = { army_type = robotic_army } fmerc_robotic_army = yes
		else = { if = { limit = { army_type = robotic_defense_army } fmerc_robotic_defense_army = yes
		else = { if = { limit = { army_type = android_army } fmerc_android_army = yes
		else = { if = { limit = { army_type = android_defense_army } fmerc_android_defense_army = yes
		else = { if = { limit = { army_type = psionic_army } fmerc_psionic_army = yes
		else = { if = { limit = { army_type = xenomorph_army } fmerc_xenomorph_army = yes
		else = { if = { limit = { army_type = gene_warrior_army } fmerc_gene_warrior_army = yes
		else = { if = { limit = { army_type = swarm_army } fmerc_swarm_army = yes
		# else = { if = { limit = { army_type = defense_army } fmerc_defense_army = yes
		else = { if = { limit = { army_type = shroud_army } fmerc_shroud_army = yes
		else = { if = { limit = { army_type = machine_assault_1 } fmerc_machine_assault_1 = yes
		else = { if = { limit = { army_type = machine_defense } fmerc_machine_defense_1 = yes
		else = { if = { limit = { army_type = machine_assault_2 } fmerc_machine_assault_2 = yes
		# else = { if = { limit = { army_type = machine_defense_2 } fmerc_machine_defense_2 = yes
		else = { if = { limit = { army_type = machine_assault_3 } fmerc_machine_assault_3 = yes
		else = {
			ROOT = {
				change_variable = {
					which = "MercLiberateArmyCount"
					value = 1
				}
			}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
		#}}
		#}}
	}

	# Debug scope printing standard
	if = { limit = { has_global_flag = "debug" }
		print_scope_effect = yes
		target_scopes_log = yes
	}
			
	# Now we invade with the same number of armies that we found.
	ROOT = {
		set_variable = {
			which = "MercLiberateArmyAdditional"
			value = "MercSuccess"
		}
		while = { # ye I could use divide_variable. I wasn't thinking straight
			limit = {
				check_variable = {
					which = "MercLiberateArmyAdditional"
					value > 20
				}
			}
			change_variable = {
				which = "MercLiberateArmyCount"
				value = 1
			}
			subtract_variable = {
				which = "MercLiberateArmyAdditional"
				value = 20
			}
		}
		log = "Spawning [Root.MercLiberateArmyCount] armies."
		while = {
			limit = {
				check_variable = {
					which = "MercLiberateArmyCount"
					value > 0.9
				}
			}
			PREV = { # Planet
				create_army = {
					name = "Hired Rebels"
					owner = event_target:tmp_army_country
					species = event_target:merc_buyer
					#type = "defense_army"       # defense_army will just disapear
					type = "rebel_slave_defense_army"
				}
			}
			subtract_variable = {
				which = "MercLiberateArmyCount"
				value = 1
			}
		}
	}
}

fmerc_assault_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "assault_army"
		}
	}
}
fmerc_slave_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "slave_army"
		}
	}
}
fmerc_clone_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "clone_army"
		}
	}
}
fmerc_robotic_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "robotic_army"
		}
	}
}
fmerc_robotic_defense_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "robotic_defense_army"
		}
	}
}
fmerc_android_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "android_army"
		}
	}
}
fmerc_android_defense_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "android_defense_army"
		}
	}
}
fmerc_psionic_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "psionic_army"
		}
	}
}
fmerc_xenomorph_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "xenomorph_army"
		}
	}
}
fmerc_gene_warrior_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "gene_warrior_army"
		}
	}
}
fmerc_swarm_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "swarm_army"
		}
	}
}
# fmerc_defense_army = {
	# log = "fmerc_defense_army This: [This.GetName]"
	# log = "fmerc_defense_army Root: [Root.GetName]"
	# log = "fmerc_defense_army From: [From.GetName]"
	# log = "fmerc_defense_army Prev: [Prev.GetName]"
	# PREV = { # Planet
		# create_army = {
			# name = "Hired Rebels"
			# owner = event_target:tmp_army_country
			# species = event_target:merc_buyer
			# type = "defense_army"		
		# }
	# }
# }
fmerc_shroud_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "shroud_army"
		}
	}
}
fmerc_machine_assault_1 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "machine_assault_1"
		}
	}
}
fmerc_machine_defense_1 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			#type = "machine_defense_1"
			type = "machine_defense"
		}
	}
}
fmerc_machine_assault_2 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "machine_assault_2"
		}
	}
}
# fmerc_machine_defense_2 = {
	# PREV = { # Planet
		# create_army = {
			# name = "Hired Rebels"
			# owner = event_target:tmp_army_country
			# species = event_target:merc_buyer
			# #type = "machine_defense_1"
			# type = "machine_defense"
		# }
	# }
# }
fmerc_machine_assault_3 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:merc_buyer
			type = "machine_assault_3"
		}
	}
}

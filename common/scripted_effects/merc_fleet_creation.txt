###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###



fmerc_stage3_spawn_fixed_corvette = {
	last_created_fleet = {
		create_ship = {
			name = random
			design = "Mercenary Corvette"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_fixed_destroyer = {
	last_created_fleet = {
		create_ship = {
			name = random
			design = "Mercenary Destroyer"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_fixed_cruiser = {
	last_created_fleet = {
		create_ship = {
			name = random
			design = "Mercenary Cruiser"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_fixed_battleship = {
	last_created_fleet = {
		create_ship = {
			name = random
			design = "Mercenary Battleship"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_corvette = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "corvette"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_destroyer = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "destroyer"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_cruiser = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "cruiser"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_battleship = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "battleship"
			prefix = no
		}
	}
}

merc_stage3_spawn_random_design_fleet = {
	while = { limit = { check_variable = { which = "MercSpawnCorvette" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_corvette = yes }
		subtract_variable = { which = "MercSpawnCorvette" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCorvette" value > 0 } }
		fmerc_stage3_spawn_corvette = yes
		subtract_variable = { which = "MercSpawnCorvette" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnDestroyer" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_destroyer = yes }
		subtract_variable = { which = "MercSpawnDestroyer" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnDestroyer" value > 0 } }
		fmerc_stage3_spawn_destroyer = yes
		subtract_variable = { which = "MercSpawnDestroyer" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCruiser" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_cruiser = yes }
		subtract_variable = { which = "MercSpawnCruiser" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCruiser" value > 0 } }
		fmerc_stage3_spawn_cruiser = yes
		subtract_variable = { which = "MercSpawnCruiser" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnBattleship" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_battleship = yes }
		subtract_variable = { which = "MercSpawnBattleship" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnBattleship" value > 0 } }
		fmerc_stage3_spawn_battleship = yes
		subtract_variable = { which = "MercSpawnBattleship" value = 1 }
	}
}

merc_stage3_spawn_predesigned_fleet = {
	while = { limit = { check_variable = { which = "MercSpawnCorvette" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_fixed_corvette = yes }
		subtract_variable = { which = "MercSpawnCorvette" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCorvette" value > 0 } }
		fmerc_stage3_spawn_fixed_corvette = yes
		subtract_variable = { which = "MercSpawnCorvette" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnDestroyer" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_fixed_destroyer = yes }
		subtract_variable = { which = "MercSpawnDestroyer" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnDestroyer" value > 0 } }
		fmerc_stage3_spawn_fixed_destroyer = yes
		subtract_variable = { which = "MercSpawnDestroyer" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCruiser" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_fixed_cruiser = yes }
		subtract_variable = { which = "MercSpawnCruiser" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnCruiser" value > 0 } }
		fmerc_stage3_spawn_fixed_cruiser = yes
		subtract_variable = { which = "MercSpawnCruiser" value = 1 }
	}
	while = { limit = { check_variable = { which = "MercSpawnBattleship" value > 10 } }
		while = { count = 10 fmerc_stage3_spawn_fixed_battleship = yes }
		subtract_variable = { which = "MercSpawnBattleship" value = 10 }
	}
	while = { limit = { check_variable = { which = "MercSpawnBattleship" value > 0 } }
		fmerc_stage3_spawn_fixed_battleship = yes
		subtract_variable = { which = "MercSpawnBattleship" value = 1 }
	}
}

# While loops only loop to 100.
fmerc_stage3_match_fleet_power = {
	log = "Final fleet power: [this.MercSpawn]."

	set_variable = { which = "MercSpawnCorvette" value = 0 }
	set_variable = { which = "MercSpawnDestroyer" value = 0 }
	set_variable = { which = "MercSpawnCruiser" value = 0 }
	set_variable = { which = "MercSpawnBattleship" value = 0 }


	# We need to spawn at least 10 000 for liberation mission to ensure normal borbadment
	# # we will add fleet only for Liberation mission and only if Fleetpower less than 10000
	if = {
		limit = {
			has_country_flag = "merc_op_liberate"				
		}
		if = {
			limit = {
				check_variable = { which = "MercSpawn" value > 0 value < 3000 }
			}

			multiply_variable = { which = MercSpawn value = 3.2 } # multiplier for liberate missions

			log = "Liberate multiplier added (3.2). Final fleet power: [this.MercSpawn]."

			else = {
				if = {
					limit = {
						check_variable = { which = "MercSpawn" value > 3000 value < 5000 }
					}
					multiply_variable = { which = MercSpawn value = 2.0 } # multiplier for liberate missions
					
					log = "Liberate multiplier added (2.0). Final fleet power: [this.MercSpawn]."

					else = {
						if = {
							limit = {
								check_variable = { which = "MercSpawn" value > 5000 value < 7500 }
							}
							multiply_variable = { which = MercSpawn value = 1.35 } # multiplier for liberate missions
							
							log = "Liberate multiplier added (1.35). Final fleet power: [this.MercSpawn]."
						}
						else = {
							if = {
								limit = {
									check_variable = { which = "MercSpawn" value > 7500 value < 10000 }
								}
								multiply_variable = { which = MercSpawn value = 1.2 } # multiplier for liberate missions
								
								log = "Liberate multiplier added (1.2). Final fleet power: [this.MercSpawn]."
							}
						}
					}
				}				
			}				
		}		
	}

	
	# Because fleets can not contain more than 500 ships, we need to convert
	# from fleet power to ship numbers.
	# merc_use_global_designs is set or not in stage 1
	while = {
		limit = { check_variable = { which = "MercSpawn" value > 0 } }
		if = { limit = { check_variable = { which = "MercSpawn" value > "BattleshipSquad" } }
			change_variable = { which = "MercSpawnCorvette" value = 32 }
			change_variable = { which = "MercSpawnDestroyer" value = 8 }
			change_variable = { which = "MercSpawnCruiser" value = 4 }
			change_variable = { which = "MercSpawnBattleship" value = 1 }
			subtract_variable = { which = "MercSpawn" value = "BattleshipSquad" }
		else = { if = { limit = { check_variable = { which = "MercSpawn" value > "CruiserSquad" } }
			change_variable = { which = "MercSpawnCorvette" value = 8 }
			change_variable = { which = "MercSpawnDestroyer" value = 2 }
			change_variable = { which = "MercSpawnCruiser" value = 1 }
			subtract_variable = { which = "MercSpawn" value = "CruiserSquad" }
		else = { if = { limit = { check_variable = { which = "MercSpawn" value > "DestroyerSquad" } }
			change_variable = { which = "MercSpawnCorvette" value = 4 }
			change_variable = { which = "MercSpawnDestroyer" value = 1 }
			subtract_variable = { which = "MercSpawn" value = "DestroyerSquad" }
		else = {
			change_variable = { which = "MercSpawnCorvette" value = 1 }
			subtract_variable = { which = "MercSpawn" value = "CorvettePower" }
		} } } } } }
	}

	# Now add up all the ship numbers
	set_variable = { which = "MercSpawnTotal" value = "MercSpawnCorvette" }
	change_variable = { which = "MercSpawnTotal" value = "MercSpawnDestroyer" }
	change_variable = { which = "MercSpawnTotal" value = "MercSpawnCruiser" }
	change_variable = { which = "MercSpawnTotal" value = "MercSpawnBattleship" }

	# This doesn't actually take into account relative fleet powers between
	# the ship sizes. I don't care at this point.
	while = {
		limit = {
			check_variable = { which = "MercSpawnTotal" value > 490 }
			check_variable = { which = "MercSpawnCorvette" value > 7 }
		}
		subtract_variable = { which = "MercSpawnCorvette" value = 8 }
		change_variable = { which = "MercSpawnDestroyer" value = 2 }
		subtract_variable = { which = "MercSpawnTotal" value = 6 }
	}
	while = {
		limit = {
			check_variable = { which = "MercSpawnTotal" value > 490 }
			check_variable = { which = "MercSpawnDestroyer" value > 7 }
		}
		subtract_variable = { which = "MercSpawnDestroyer" value = 8 }
		change_variable = { which = "MercSpawnCruiser" value = 4 }
		subtract_variable = { which = "MercSpawnTotal" value = 4 }
	}

	if = { limit = { has_country_flag = "merc_use_global_designs" }
		merc_stage3_spawn_predesigned_fleet = yes
	else = {
		merc_stage3_spawn_random_design_fleet = yes
	} }

}

# THIS is the operations country
merc_ensure_harbor = {

	# ZZZ Can't use any verify effects here, because this is used in stage 4

	# ZZZ so apparently, at least for countries without a capital,
	# ZZZ random_owned_fleet actually scopes to something even if
	# ZZZ no actual fleets exist ingame

	
	random_owned_fleet = {
		limit = { num_ships > 0 }
		closest_system = {
			limit = { merc_has_station = yes }
			random_fleet_in_system = {
				limit = { merc_is_station = yes }
				
				PREVPREVPREV = { set_country_flag = "merc_found_harbor" }
				save_event_target_as = merc_harbor
				
				log = "Harbor: Existing fleet. merc_harbor name : [merc_harbor.GetName]"
			}
		}
	}

	random_system = {
		limit = { has_star_flag = "merc_deathzone" }	
		if = { limit = { merc_has_station = yes }

			random_fleet_in_system = {

				limit = { merc_is_station = yes }

				PREVPREVPREV = { set_country_flag = "merc_found_harbor" }
				save_event_target_as = merc_harbor
				
				log = "Harbor: In death zone. merc_harbor name : [merc_harbor.GetName]"
			}
		else = {
			closest_system = {
				limit = { merc_has_station = yes }
				set_timed_star_flag = {
					flag = "close_to_merc_deathzone"
					days = 5
				}
				random_fleet_in_system = {
					limit = { merc_is_station = yes }
					log = "Harbor close to deathzone: Will try to spawn in another place"

					#In case Leviafans system we will newer reach target system. All fleets will be killed 
					
					# PREVPREVPREV = { set_country_flag = "merc_found_harbor" }
					# save_event_target_as = merc_harbor

				}
			}
		} }
	}

	if = {
		limit = {
			# We use this effect for the actual enclave as well, but we dont
			# want to use these particular selectors unless we're an op
			is_country_type = "fmerc_operations"
			NOT = { has_country_flag = "merc_found_harbor" }
		}
		# The target country might not always exist; we might have destroyed it
		if = { limit = { merc_is_country_target_valid = yes }
			if = { limit = { merc_is_target_valid = yes }
				event_target:merc_current_target = {
					solar_system = {
						closest_system = {
							limit = { merc_has_station = yes
									 NOT = { has_star_flag = "close_to_merc_deathzone" }
							}
							random_fleet_in_system = {
								limit = { merc_is_station = yes }

								PREVPREVPREVPREV = { set_country_flag = "merc_found_harbor" }
								save_event_target_as = merc_harbor
								
								log = "Harbor: Close to current target ship/planet. new merc_harbor name : [merc_harbor.GetName]"
							}
						}
					}
				}
			}

			if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
				# Find a location inside the targets borders
				event_target:merc_country = {
					random_system_within_border = {
						limit = { merc_has_station = yes }
						random_fleet_in_system = {
							limit = { merc_is_station = yes }

							PREVPREVPREV = { set_country_flag = "merc_found_harbor" }
							save_event_target_as = merc_harbor
							
							log = "Harbor: Inside targets borders new merc_harbor: [merc_harbor.GetName]"
						}
					}
				}
			}
			# Find one of our targets, and find the closest station to it.
			if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
				event_target:merc_country = {
					random_owned_fleet = {
						limit = {
							any_owned_ship = { has_ship_flag = "merc_target" }
							exists = solar_system
						}
						closest_system = {
							limit = { merc_has_station = yes }
							random_fleet_in_system = {
								limit = { merc_is_station = yes }
								
								PREVPREVPREVPREV = { set_country_flag = "merc_found_harbor" }
								save_event_target_as = merc_harbor
								
								log = "Close to target ship, new merc_harbor: [merc_harbor.GetName]"
							}
						}
					}
				}
			}
			# See if the target has any marked planets and spawn close to that
			if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
				event_target:merc_country = {
					random_owned_planet = {
						limit = { has_planet_flag = "merc_target" }
						closest_system = {
							limit = { merc_has_station = yes }
							random_fleet_in_system = {
								limit = { merc_is_station = yes }

								PREVPREVPREVPREV = { set_country_flag = "merc_found_harbor" }
								save_event_target_as = merc_harbor
								
								log = "Harbor: Close to target planet, new merc_harbor: [merc_harbor.GetName]"
							}
						}
					}
				}
			}
		}
	}

	# Fall back to any station owned by an enclave
	if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			random_owned_fleet = {
				limit = { merc_is_station = yes }

				PREVPREV = { set_country_flag = "merc_found_harbor" }
				save_event_target_as = merc_harbor
				
				log = "Fall back to any station owned by an enclave : [merc_harbor.GetName]"
			}
		}
	}

	if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
		random_rim_system = {
			limit = {
				NOT = {
					any_neighbor_system = { exists = space_owner }
					exists = space_owner
				}
			}
			random_system_planet = {

				PREVPREV = { set_country_flag = "merc_found_harbor" }
				save_event_target_as = merc_harbor

				log = "Harbor: Clean rim system merc_harbor: [merc_harbor.GetName]"
			}
		}
	}

	# If this fails, this game is fucked.
	if = { limit = { NOT = { has_country_flag = "merc_found_harbor" } }
		random_rim_system = {
			random_system_planet = {

				save_event_target_as = merc_harbor

				log = "Random rim system merc_harbor: [merc_harbor.GetName]"				
			}
		}
	}

	remove_country_flag = "merc_found_harbor"
}

fmerc_stage3_match_solar_system = {
	if = {
		limit = {
			exists = solar_system
			solar_system = { NOT = { has_star_flag = "merc_dont_match" } }
		}
		solar_system = {
			set_star_flag = "merc_dont_match"
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = {
						OR = {
							is_hostile = PREVPREVPREVPREV
							is_overlord_to = event_target:merc_country
							is_same_value = event_target:merc_country
							AND = {
								has_federation = yes
								is_in_federation_with = event_target:merc_country
							}
						}
					}
				}
				merc_shameful_get_fleet_power = yes
				log = "Matching fleet [this.GetName]: [root.MercSpawn]."
			}
		}
		else = {
			log = "Not matching towards system."
		}
	}
}

# Depends on merc_buyer and merc_country
merc_spawn_fleet = {
	# Make sure we have somewhere to spawn
	merc_ensure_harbor = yes

	log = "Creating new fleet in [merc_harbor.GetStarName]."

	# For when we recreate the fleet
	set_faction_hostility = { set_hostile = no }
	create_fleet = {
		effect = {
			set_owner = ROOT
			set_location = {
				target = event_target:merc_harbor
				distance = 40
				angle = random
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = self
			set_aggro_range = 80
			set_fleet_flag = "merc_operations"
		}
	}

	if = {
		limit = { event_target:merc_country = { merc_is_generic = no } }
		# Be much more aggressive towards non-generic countries
		set_variable = { which = "MercSpawn" value = 4500 }
		else = { set_variable = { which = "MercSpawn" value = 1500 } }
	}
	if = {
		limit = { has_country_flag = "merc_op_liberate" }
		# 1.5k extra fleet power.
		# I don't want to add more right now, because it's not going to
		# scale well in any meaningful way. I need to do a more in depth
		# examination of the target country, see how many military fleets
		# and how large they are before I can more easily determine
		# what our "success chance" is.
		change_variable = { which = "MercSpawn" value = 1500 }
	}
	log = "Base fleet power is [this.MercSpawn]."

	# Add MercSpawn per opinion level with merc hq
	random_country = {
		limit = { is_country_type = "fmerc_enclave" }
		if = { limit = { trust = { who = event_target:merc_buyer value = 100 } }
			PREV = { change_variable = { which = "MercSpawn" value = 1000 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 90 } }
			PREV = { change_variable = { which = "MercSpawn" value = 900 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 80 } }
			PREV = { change_variable = { which = "MercSpawn" value = 800 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 70 } }
			PREV = { change_variable = { which = "MercSpawn" value = 700 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 60 } }
			PREV = { change_variable = { which = "MercSpawn" value = 600 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 50 } }
			PREV = { change_variable = { which = "MercSpawn" value = 500 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 40 } }
			PREV = { change_variable = { which = "MercSpawn" value = 400 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 30 } }
			PREV = { change_variable = { which = "MercSpawn" value = 300 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 20 } }
			PREV = { change_variable = { which = "MercSpawn" value = 200 } }
		else = { if = { limit = { trust = { who = event_target:merc_buyer value > 10 } }
			PREV = { change_variable = { which = "MercSpawn" value = 100 } }
		}}}}}}}}}}}}}}}}}}}
	}
	log = "Adjusted for trust level: [this.MercSpawn]."

	# Adjust for success chance before we match target fleets
	# So we only adjust the "base" + trust values.
	set_variable = { which = "MercPercentSuccess" value = "MercSuccess" }
	divide_variable = { which = "MercPercentSuccess" value = 100 }
	multiply_variable = { which = "MercSpawn" value = "MercPercentSuccess" }
	log = "Base adjusted for success (x[this.MercPercentSuccess]): [this.MercSpawn]."

	# We need to spawn _something_ no matter what. The player bought a service.
	if = {
		limit = { check_variable = { which = "MercSpawn" value < "CorvettePower" } }
		change_variable = { which = "MercSpawn" value = "CorvettePower" }
		change_variable = { which = "MercSpawn" value = "CorvettePower" }
		log = "Adjusted minimum: [this.MercSpawn]."
	}
	while = {
		limit = { check_variable = { which = "MercSpawn" value < "CorvettePower" } }
		change_variable = { which = "MercSpawn" value = 200 }
		log = "Adjusted absolute minimum: [this.MercSpawn]."
	}

	# merc_current_target is always a planet or ship
	if = { limit = { merc_is_target_valid = yes }
		event_target:merc_current_target = { fmerc_stage3_match_solar_system = yes }
	}
	event_target:merc_harbor = { fmerc_stage3_match_solar_system = yes }
	while = { limit = { any_system = { has_star_flag = "merc_dont_match" } } random_system = { limit = { has_star_flag = "merc_dont_match" } remove_star_flag = "merc_dont_match" } }

	fmerc_stage3_match_fleet_power = yes
}

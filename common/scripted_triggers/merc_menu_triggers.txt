###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


merc_menu_3_is_targetted_type = {
	ROOT = {
		switch = {
			trigger = has_country_flag
			merc_country_type_generic = { PREV = { merc_menu_3_is_known_target_generic = yes } }
			merc_country_type_fallen = { PREV = { merc_menu_3_is_known_target_fallen = yes } } 
			merc_country_type_hivemind = { PREV = { merc_menu_3_is_known_target_hivemind = yes } } 
			merc_country_type_unbidden = { PREV = { merc_menu_3_is_known_target_unbidden = yes } }
			merc_country_type_synthetic = { PREV = { merc_menu_3_is_known_target_synthetic = yes } }
		}
	}
}

###############################################################################
# A target country is "known" if it has comms with ROOT. These targets are the
# ones we list for target selection.
# A country is VALID as a target for many other reasons.

merc_menu_3_is_known_target = {
	has_communications = ROOT
	NOT = { is_same_value = ROOT }
}

merc_menu_3_is_known_target_generic = {
	merc_is_generic = yes
	merc_menu_3_is_known_target = yes
}

merc_menu_3_is_known_target_fallen = {
	merc_is_fallen = yes
	merc_menu_3_is_known_target = yes
}

merc_menu_3_is_known_target_hivemind = {
	merc_is_hivemind = yes
	merc_menu_3_is_known_target = yes
}

merc_menu_3_is_known_target_unbidden = {
	merc_is_unbidden = yes
	merc_menu_3_is_known_target = yes
}

merc_menu_3_is_known_target_synthetic = {
	merc_is_synthetic = yes
	merc_menu_3_is_known_target = yes
}

###############################################################################
# Certain operation types should not be available towards certain country
# types. In these triggers you don't actually have access to the target.
# Only ROOT/THIS, which are the player.
#

merc_menu_3_has_valid_operation_generic = {
	always = yes
}

merc_menu_3_has_valid_operation_fallen = {
	NOT = { has_country_flag = "merc_op_spaceport" }
	NOT = { has_country_flag = "merc_op_civilian" }
}

# XXX Add bombardment obliteration operation.
merc_menu_3_has_valid_operation_hivemind = {
	NOT = { has_country_flag = "merc_op_liberate" }
}

merc_menu_3_has_valid_operation_unbidden = {
	NOT = { has_country_flag = "merc_op_spaceport" }
	NOT = { has_country_flag = "merc_op_liberate" }
}

merc_menu_3_has_valid_operation_synthetic = {
	# XXX AI revolt takes over your planets and plant "custodian" pops
	# the problem is that when the operation finishes, none of these trigger:
	# on_planet_defenders_lose
	# on_rebels_take_planet
	# on_rebels_take_planet_owner_switched
	# So I probably have to use on_planet_ownerless or something
	NOT = { has_country_flag = "merc_op_liberate" }
	NOT = { has_country_flag = "merc_op_spaceport" }
	#NOT = { has_country_flag = "merc_op_civilian" }
}

###############################################################################
# In these triggers you check whether the target country (THIS) is a valid
# country for the specific operation.
# ROOT is the player.
# If you need specific conditions depending on the target country type,
# just check is_country_type.
#

# Scope for spaceport was changed from planet to ship/fleet

# was updated
merc_menu_3_is_valid_target_spaceport = {
	OR = {
		count_owned_ships = {
			limit = {
				merc_valid_spaceport_target = yes
				merc_minimum = yes
			}
			count > 3  # minimum 3 starports
		}
		AND = {
			merc_is_unbidden = yes
			# unbidden only has 1-4 constructors, usually 3.
			any_owned_fleet = { merc_spaceport_p9 = yes }
		}
	}
}

merc_menu_3_is_valid_target_liberate = {
	OR = {
		NOT = { has_ethic = ethic_gestalt_consciousness }
		#has_authority = auth_ancient_machine_intelligence
		is_country_type = "ai_empire"
	}
	num_owned_planets > 2
	any_owned_planet = { merc_liberate_p9 = yes }
}

merc_menu_3_is_valid_target_civilian = {
	OR = {
		count_owned_ships = {
			limit = {
				merc_valid_civilian_raid_target = yes
				merc_minimum = yes
			}
			count > 4
		}
		AND = {
			merc_is_unbidden = yes
			# unbidden only has 1-4 constructors, usually 3.
			any_owned_fleet = { merc_civilian_p9 = yes }
		}
	}
}

merc_menu_3_is_valid_target_military = {
	num_fleets > 3 # Includes civilian ships as well
	any_owned_fleet = { merc_military_p9 = yes }
}

merc_menu_3_is_valid_target_clear = {
	any_system_within_border = {
		# If I use any_ship_in_system, I get weird errors like
		# "invalid scope for trigger. got [country], expected {galactic_object}."
		# which means that any_system_within_border has scoped to a country
		# somehow. This shit is really weird. And you don't get 1 error either,
		# you get hundreds, because it's validated every tick per button.
		#
		# So, we work around that by first scoping to a system, then to
		# _any_ ship, which includes the whole god damn game, and then check
		# if that ship has owner and solar_system that are simply the same
		# exact values as the scopes we want to verify.
		# (it might be worth noting that any_ship doesn't always scope
		# to the whole game, it depends where you invoke it from)
		#
		# There is no is_same_system, but if there was, and we used that,
		# it would also error. And probably if we used is_same_empire, that
		# would error as well.
		# Jeez.
		any_ship = {
			exists = owner
			owner = { is_same_value = PREVPREVPREVPREV }
			OR = {
				is_ship_class = shipclass_military_station
				is_ship_class = shipclass_military
			}
			exists = solar_system
			solar_system = { is_same_value = PREVPREV }
		}
	}
	# This spews errors like there's no tomorrow. I can't for the life of me
	# understand why it would. is_scope_valid just seems to do nothing, and
	# checking |exists = solar_system| before scoping to it does not prevent
	# errors like "Script Error: Invalid context switch[solar_system]""
	#
	# any_owned_fleet = {
	# 	is_scope_valid = yes
	# 	is_ship_class = shipclass_military
	# 	exists = solar_system
	# 	solar_system = {
	# 		is_within_borders_of = ROOT
	# 	}
	# 	#is_inside_border = ROOT # this errors as well
	# }
}

merc_menu_3_is_valid_target = {
	NOT = { has_country_flag = "fmerc_operations_target" }
	ROOT = {
		switch = {
			trigger = has_country_flag
			merc_op_spaceport = { PREV = { merc_menu_3_is_valid_target_spaceport = yes } }
			merc_op_liberate = { PREV = { merc_menu_3_is_valid_target_liberate = yes } }
			merc_op_civilian = { PREV = { merc_menu_3_is_valid_target_civilian = yes } }
			merc_op_military = { PREV = { merc_menu_3_is_valid_target_military = yes } }
			merc_op_clear = { merc_menu_3_is_valid_target_clear = yes }
		}
	}
}

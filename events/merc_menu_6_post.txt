###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


namespace = mercMenu

country_event = {
	id = mercMenu.9000
	title = merc.conclusion.title
	desc = {
		text = merc.conclusion.operation.go
		trigger = {
			AND = {
				check_variable = { which = "MercMinerals" value > "MercCost" }
				check_variable = { which = "MercEnergy" value > "MercCostEnergy" }
				check_variable = { which = "MercInfluence" value > "MercCostInfluence" }
			}
		}
	}
	desc = {
		text = merc.conclusion.operation.abort
		trigger = {
			NAND = { # Make sure we check all, dont bail on the first positive
				check_variable = { which = "MercMinerals" value > "MercCost" }
				check_variable = { which = "MercEnergy" value > "MercCostEnergy" }
				check_variable = { which = "MercInfluence" value > "MercCostInfluence" }
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_trader_window"
	custom_gui_option = "enclave_trader_option"
	force_open = yes
	picture_event_data = {
		portrait = event_target:mercenaries
		room = enclave_trader_room
	}
	immediate = { merc_account_update = yes }

	after = { hidden_effect = { country_event = { id = mercMenu.9001 } } }

	option = {
		name = "merc.close"
		default_hide_option = yes
	}
}

# The reason this is separated into its own event is because all effects and
# triggers in option={} and after={} are continously evaluated 10 times per
# second for what stellaris wants to show in the button tooltips. Even
# scripted_effects are chained to and inspected for tooltip-text, and also
# even if you wrap it in hidden_effect/hidden_trigger, it's still evaluated.
# Which is obviously completely crazy.
country_event = {
	id = mercMenu.9001
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_country_flag = "fmerc_diplomacy_engaged"
		if = {
			limit = {
				check_variable = { which = "MercMinerals" value > "MercCost" }
				check_variable = { which = "MercEnergy" value > "MercCostEnergy" }
				check_variable = { which = "MercInfluence" value > "MercCostInfluence" }
			}
			set_country_flag = "fmerc_active_operation"
			# For insurance purposes
			set_variable = { which = "MercInsuranceBase" value = "MercCost" }
			change_variable = { which = "MercInsuranceBase" value = "MercCostEnergy" }
			change_variable = { which = "MercInsuranceBase" value = "MercCostInfluence" }
			merc_account_grabdatcash = yes
			fmerc_init_stage1 = yes
		}
	}
}

# Buyer is notified that operation has been completed
# FROM is the mercenary operations country  ???
# XXX Make this diplomatic.
country_event = {
	id = mercMenu.9004
	title = merc.completed.title
	desc = {
		trigger = {
			text = merc.completed.desc
			success_text = {
				text = "merc.completed.merc_op_spaceport"
				FROM.owner = {
					has_country_flag = merc_op_spaceport
					NOT = { has_country_flag = fmerc_no_valid_targets }
				}
			}
			success_text = {
				text = "merc.completed.merc_op_spaceport.failed"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_spaceport
						has_country_flag = fmerc_no_valid_targets 
					}
				}
			}
			success_text = {
				text = "merc.completed.merc_op_liberate"
				FROM.owner = {
					has_country_flag = merc_op_liberate
					NOT = { has_country_flag = fmerc_no_valid_targets }
					NOT = { has_country_flag = fleet_destroyed }
				}
			}
			success_text = {
				text = "merc.completed.merc_op_liberate.failed1"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_liberate
						has_country_flag = fleet_destroyed 
					}
				}
			}
			success_text = {
				text = "merc.completed.merc_op_liberate.failed2"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_liberate
						has_country_flag = fmerc_no_valid_targets 
					}
				}
			}
			success_text = {
				text = "merc.completed.merc_op_civilian"
				FROM.owner = {
					has_country_flag = merc_op_civilian
					NOT = { has_country_flag = fmerc_no_valid_targets }
				}
			}
			success_text = {
				text = "merc.completed.merc_op_civilian.failed"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_civilian
						has_country_flag = fmerc_no_valid_targets 
					}
				}
			}
			success_text = {
				text = "merc.completed.merc_op_military"
				FROM.owner = {
					has_country_flag = merc_op_military
					NOT = { has_country_flag = fmerc_no_valid_targets }
				}
			}
			success_text = {
				text = "merc.completed.merc_op_military.failed"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_military
						has_country_flag = fmerc_no_valid_targets 
					}
				}
			}
			success_text = {
				text = "merc.completed.merc_op_clear"
				FROM.owner = {
					has_country_flag = merc_op_clear
					NOT = { has_country_flag = fmerc_no_valid_targets }
				}
			}
			success_text = {
				text = "merc.completed.merc_op_clear.failed"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_clear
						has_country_flag = fmerc_no_valid_targets 
					}
				}
			}
			success_text = {
				text = "merc.completed.pretext"
				FROM.owner = { check_variable = { which = "MercKillsTotal" value > 0 } }
			}
			success_text = {
				text = "merc.completed.liberated"
				FROM.owner = { check_variable = { which = "MercLiberatedPlanets" value > 0 } }
			}
			success_text = {
				text = "merc.completed.obspost"
				FROM.owner = { check_variable = { which = "MercKillsObs" value > 0 } }
			}
			success_text = {
				text = "merc.completed.wormhole"
				FROM.owner = { check_variable = { which = "MercKillsWormhole" value > 0 } }
			}
			success_text = {
				text = "merc.completed.research"
				FROM.owner = { check_variable = { which = "MercKillsResearch" value > 0 } }
			}
			success_text = {
				text = "merc.completed.mining"
				FROM.owner = { check_variable = { which = "MercKillsMining" value > 0 } }
			}
			success_text = {
				text = "merc.completed.spaceport"
				FROM.owner = { check_variable = { which = "MercKillsSpaceport" value > 0 } }
			}
			success_text = {
				text = "merc.completed.stations"
				FROM.owner = { check_variable = { which = "MercKillsStations" value > 0 } }
			}
			success_text = {
				text = "merc.completed.Colossus"
				FROM.owner = { check_variable = { which = "MercKillsColossus" value > 0 } }
			}
			success_text = {
				text = "merc.completed.killedport"
				FROM.owner = { check_variable = { which = "MercKilledPort" value > 0 } }
			}
			success_text = {
				text = "merc.completed.killedhold"
				FROM.owner = { check_variable = { which = "MercKilledHold" value > 0 } }
			}
			success_text = {
				text = "merc.completed.killedfortress"
				FROM.owner = { check_variable = { which = "MercKilledFortress" value > 0 } }
			}
			success_text = {
				text = "merc.completed.killedcit"
				FROM.owner = { check_variable = { which = "MercKilledCit" value > 0 } }
			}
			success_text = {
				text = "merc.completed.killedother"
				FROM.owner = { check_variable = { which = "MercKilledOther" value > 0 } }
			}
			success_text = {
				text = "merc.completed.civilian"
				FROM.owner = { check_variable = { which = "MercKillsCivilian" value > 0 } }
			}
			success_text = {
				text = "merc.completed.transport"
				FROM.owner = { check_variable = { which = "MercKillsTransport" value > 0 } }
			}
			success_text = {
				text = "merc.completed.ships"
				FROM.owner = { check_variable = { which = "MercKillsShips" value > 0 } }
			}
			success_text = {
				text = "merc.completed.nothing"
				FROM.owner = { check_variable = { which = "MercKillsTotal" value = 0 } }
			}
			success_text = {
				text = "merc.completed.total"
				FROM.owner = { check_variable = { which = "MercKillsTotal" value > 0 } }
			}
			success_text = {
				text = "merc.completed.disabled"
				FROM.owner = { check_variable = { which = "MercDisabledTotal" value > 0 } }
			}
			success_text = {
				text = "merc.completed.outpost"
				FROM.owner = { check_variable = { which = "MercDisabledOut" value > 0 } }
			}
			success_text = {
				text = "merc.completed.starport"
				FROM.owner = { check_variable = { which = "MercDisabledPort" value > 0 } }
			}
			success_text = {
				text = "merc.completed.starhold"
				FROM.owner = { check_variable = { which = "MercDisabledHold" value > 0 } }
			}
			success_text = {
				text = "merc.completed.starfortress"
				FROM.owner = { check_variable = { which = "MercDisabledFortress" value > 0 } }
			}
			success_text = {
				text = "merc.completed.citadel"
				FROM.owner = { check_variable = { which = "MercDisabledCit" value > 0 } }
			}
			success_text = {
				text = "merc.completed.posttext"
				FROM.owner = { check_variable = { which = "MercKillsTotal" value > 0 } }
			}
			success_text = {
			text = "merc.completed.merc_op_liberate.defenders"
				FROM.owner = {
					AND = {
						has_country_flag = merc_op_liberate
						has_country_flag = planet_defenders_win 
					}
				}
			}
		}
	}

	immediate = {
	
		# Debug scope printing
		if = { limit = { has_global_flag = "debug" }
			log = "------------------------------"
			log = "mercMenu.9004 Checking variables that should be transfered in this event"
			log = "mercMenu.9004 From.owner: [From.owner.GetName]"
			on_ship_destroyed_perp_log = yes
		}
	}	

	picture = GFX_evt_smugglers_in_bar
	is_triggered_only = yes
	option = { name = EXCELLENT }
}

# In case when event_target:mercenary_operations DOES NOT EXIST in merc_stage4_no_target_abort
# in most cases it will fire only in clear space operations
country_event = {
	id = mercMenu.9005
	title = merc.completed.title
	desc = merc.completed.notarget

	immediate = {

		# Debug scope printing
		if = { limit = { has_global_flag = "debug" }
			log = "------------------------------"
			log = "mercMenu.9005 Checking variables that should be transfered in this event"
			log = "mercMenu.9005 From.owner: [From.owner.GetName] -empty ?"
			on_ship_destroyed_perp_log = yes
		}

	}	

	picture = GFX_evt_smugglers_in_bar
	is_triggered_only = yes
	option = {
		name = merc.completed.pity
	}
}
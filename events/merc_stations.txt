###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


namespace = mercStations

event = {
	id = mercStations.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_country = { is_country_type = "fmerc_enclave" }
	}
	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			save_event_target_as = mercenaries
		}
		every_country = {
			limit = { has_country_flag = "fmerc_allow_stations" }
			if = {
				limit = {
					event_target:mercenaries = {
						NOT = {
							any_owned_fleet = {
								# Only count outposts
								has_fleet_flag = "folk_mercenary_outpost"
								solar_system = {
									is_within_borders_of = PREVPREVPREV
									NOT = { any_planet = { is_colony = yes } }
								}
							}
						}
					}
				}
				country_event = { id = mercStations.2 }
			}
		}
	}
}

# We chain to a new root event so that event targets are not shared
# with another country in the loop above.
country_event = {
	id = mercStations.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# This country has allowed station access, but we dont have any
		# stations inside their borders. At least not any good ones.

		# First, try to find a completely empty system
		random_system_within_border = {
			limit = { has_presence = no }
			random_system_planet = { save_event_target_as = spawn }
		}

		# Priority two is finding a system without any colonies and hostiles
		if = { limit = { NOT = { exists = event_target:spawn } }
			random_system_within_border = {
				limit = {
					NOT = { any_planet = { is_colony = yes } }
					merc_has_presence = no
					NOT = {
						any_ship_in_system = {
							OR = {
								is_in_combat = yes
								AND = {
									exists = owner
									owner = {
										OR = {
											is_hostile = event_target:mercenaries
											is_hostile = ROOT
										}
									}
								}
							}
						}
					}
				}
				random_system_planet = { save_event_target_as = spawn }
			}
		}

		# Lower our standards, simply find a system without colonies
		if = { limit = { NOT = { exists = event_target:spawn } }
			random_system_within_border = {
				limit = {
					NOT = { any_planet = { is_colony = yes } }
					merc_has_presence = no
					merc_has_target = no
				}
				random_system_planet = { save_event_target_as = spawn }
			}
		}
		# If we can't find that, we don't care to spawn anything.

		# Spawn, if we found a target.
		if = { limit = { exists = event_target:spawn }
			event_target:spawn = { planet_event = { id = mercStations.3 } }
		}
	}
}

planet_event = {
	id = mercStations.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_fleet = {
			name = "Whiteout Enterprises Outpost"
			effect = {
				set_owner = event_target:mercenaries
				create_ship = {
					name = "random"
					design = "Mercenary Enclave Century"
				}
				create_ship = {
					name = "random"
					design = "Mercenary Enclave Century"
				}
				create_ship = {
					name = "Spaceport"
					design = "Mercenary Spaceport"
				}
				create_ship = {
					name = "random"
					design = "Mercenary Enclave Pioneer"
				}
				create_ship = {
					name = "random"
					design = "Mercenary Enclave Pioneer"
				}
				set_fleet_formation = {
					position = { x = 2.5    y = -2.5   } #4 spaceport 3
					position = { x = -2.5   y = -2.5   } #3 spaceport 2
					position = { x = -2.5    y = 2.5    } #2 spaceport 1
					position = { x = 2.5    y = 2.5    } #2 spaceport
					position = { x = 0    y = 0    } #1
				}
				set_formation_scale = 0.6
				set_location = {
					target = ROOT
					distance = 80
					angle = random
				}
				set_fleet_flag = "folk_mercenary_outpost"
			}
		}
	}
}

###############################################################################
# Station access offer
#

event = {
	id = mercStations.100
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			country_event = { id = mercStations.101 days = 14 random = 270 }
		}
	}
}
country_event = {
	id = mercStations.101
	hide_window = yes
	is_triggered_only = yes
	trigger = { num_communications > 0 }

	immediate = {
		set_variable = { which = "MercStations" value = 0 }
		set_variable = { which = "MercContacts" value = 0 }

		every_owned_fleet = {
			limit = { merc_is_station = yes }
			PREV = { change_variable = { which = "MercStations" value = 1 } }
		}
		subtract_variable = { which = "MercStations" value = 1 } # Dont count HQ

		# Remember that has_communications is true towards yourself,
		# and that we don't want to count the operations countries
		every_country = {
			limit = {
				has_communications = ROOT
				OR = {
					is_ai = no
					is_country_type = "default"
					is_country_type = "ascended_empire"
					is_country_type = "lost_empire"
					is_country_type = "ascended_hive_mind"
				}
			}
			PREV = { change_variable = { which = "MercContacts" value = 1 } }
		}

		if = {
			limit = {
				check_variable = { which = "MercStations" value < "MercContacts" }
			}
			random_country = {
				limit = {
					NOT = { has_country_flag = "fmerc_diplomacy_engaged" }
					NOT = { has_country_flag = "fmerc_allow_stations" }
					NOT = { has_country_flag = "merc_had_station_offer" }
					OR = {
						is_ai = no
						is_country_type = "default"
						is_country_type = "ascended_empire"
						is_country_type = "lost_empire"
						is_country_type = "ascended_hive_mind"
					}
					has_communications = ROOT
				}
				country_event = { id = mercStations.102 }
			}
		}
	}
}

country_event = {
	id = mercStations.102
	title = "merc.stationoffer.title"
	desc = "merc.stationoffer.desc"
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_trader_window"
	custom_gui_option = "enclave_trader_option"
	force_open = yes
	picture_event_data = {
		portrait = FROM
		room = enclave_trader_room
	}
	immediate = { set_country_flag = "merc_had_station_offer" }
	option = {
		name = ACCEPT
		add_energy = 2500
		add_minerals = 500
		hidden_effect = {
			set_country_flag = "fmerc_allow_stations"
			set_timed_country_flag = {
				flag = "merc_cant_restrict_access"
				days = 1800
			}
		}
		ai_chance = {
			factor = 100
		}
	}
	option = {
		name = DIALOG_DECLINE
		default_hide_option = yes
		ai_chance = {
			factor = 0
		}
	}
}

###############################################################################
# Station "spreading" into uncharted territory
#

event = {
	id = mercStations.200
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			country_event = { id = mercStations.201 days = 14 random = 600 }
		}
	}
}

country_event = {
	id = mercStations.201
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		num_communications > 0
		NOT = { any_owned_fleet = { has_fleet_flag = "merc_expansion_fleet" } }
	}

	immediate = {
		random_owned_fleet = {
			limit = { merc_is_station = yes }
			save_event_target_as = spawn
		}
		if = { limit = { NOT = { exists = event_target:spawn } }
			break = yes
		}
		create_fleet = {
			name = "Mercenary Expansion"
			effect = {
				set_owner = ROOT
				create_ship = {
					name = "Enclave"
					design = "Mercenary Expansion"
					graphical_culture = "mammalian_01"
					prefix = no
				}
				set_location = event_target:spawn
				set_fleet_flag = "merc_expansion_fleet"
				set_fleet_stance = passive
				# TODO scale expansion attempts up/down depending on number of owned stations?
				set_variable = { which = "MercExpansionAttempts" value = 5 }
			}
		}
		last_created_fleet = { fleet_event = { id = mercStations.210 } }
	}
}

fleet_event = {
	id = mercStations.210
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		subtract_variable = { which = "MercExpansionAttempts" value = 1 }
		if = { limit = { check_variable = { which = "MercExpansionAttempts" value = 0 } }
			# Go home
			# XXX Use ensure_harbor
			owner = {
				random_owned_fleet = {
					limit = { merc_is_station = yes }
					save_event_target_as = home
				}
			}
			if = { limit = { NOT = { exists = event_target:home } }
				delete_fleet = this
				break = yes
			}
			queue_actions = {
				move_to = event_target:home
				repeat = {
					while = {
						id = mercConstructor.5
						NOT = { is_fleet_idle = yes }
					}
					wait = 14
				}
				effect = {
					id = mercConstructor.5
					delete_fleet = ROOT
				}
			}
		else = {
			# operation is a go!
			queue_actions = {
				find_random_system = {
					trigger = {
						id = mercConstructor.1
						has_presence = no
						NOT = { exists = space_owner }
						NOT = { is_same_value = ROOT.solar_system }
					}
					found_system = { move_to = this }
				}
				repeat = {
					while = {
						id = mercConstructor.2
						NOT = { is_fleet_idle = yes }
					}
					wait = 14
				}
				find_random_planet = { found_planet = { orbit_planet = this } }
				repeat = {
					while = {
						id = mercConstructor.3
						NOT = { is_fleet_idle = yes }
					}
					wait = 14
				}
				effect = {
					id = mercConstructor.4
					fleet_event = { id = mercStations.211 }
				}
			}
		} }
	}
}

fleet_event = {
	id = mercStations.211
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				# Is this system empty?
				solar_system = {
					NOT = { exists = space_owner }
					NOT = { any_planet = { exists = owner } }
					NOT = { any_planet = { exists = controller } }
					NOT = {
						# Anyone but us here?
						any_ship_in_system = {
							exists = fleet
							NOT = { fleet = { is_same_value = ROOT } }
						}
					}
				}
				# Do we have any stations within 80 distance?
				owner = {
					NOT = {
						any_owned_fleet = {
							merc_is_station = yes
							distance = {
								source = ROOT
								max_distance <= 90
								min_distance >= 5
								#max_distance = 80 # setting only max_distance is not longer avaliable
							}
						}
					}
				}
			}
			# This seems like a great place to build
			queue_actions = {
				find_closest_planet = { found_planet = { orbit_planet = this } }
				wait = 90 # Pretend to build
				repeat = {
					while = {
						id = mercConstructorBuild.1
						NOT = { is_fleet_idle = yes }
					}
					wait = 14
				}
				effect = {
					id = mercConstructorBuild.2
					if = {
						limit = {
							exists = orbit
							is_in_combat = no
						}
						owner = { save_event_target_as = mercenaries }
						orbit = { planet_event = { id = mercStations.3 } }
						if = { limit = { last_created_fleet = { has_fleet_flag = "folk_mercenary_outpost" } }
							last_created_fleet = { set_location = ROOT } # Move it to us instead
						}
					}
					fleet_event = { id = mercStations.210 }
				}
			}
			else = {
				# Try again!
				fleet_event = { id = mercStations.210 }
			}
		}
	}
}

###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


namespace = mercCommunications

# This file was initially copied out of guardian_events.txt to mimic the
# standard enclave contact events, but has been heavily modified since then.

@tier1influencecontact = 7
@tier1influencecontactxenophile = 8
@tier1influencecontactmin = 20
@tier1influencecontactmax = 80

@tier2influencecontact = 10
@tier2influencecontactxenophile = 12
@tier2influencecontactmin = 40
@tier2influencecontactmax = 100

# Any enclave fleet or operations fleet enters a system
# on_entering_system_fleet
fleet_event = {
	id = mercCommunications.90
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = {
			OR = {
				is_country_type = "fmerc_operations"
				is_country_type = "fmerc_enclave"
			}
		}
		OR = {
			has_fleet_flag = "merc_operations"
			has_fleet_flag = "merc_exploration_fleet"
			has_fleet_flag = "merc_expansion_fleet"
		}
		FROM = {
			OR = {
				AND = {
					exists = space_owner
					space_owner = { merc_needs_contact = yes }
				}
				# Make sure we trigger on random exploring fleets
				any_ship_in_system = {
					exists = owner
					owner = { merc_needs_contact = yes }
				}
			}
		}
	}
	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			save_event_target_as = target_enclave
			random_owned_fleet = {
				limit = { merc_is_station = yes }
				solar_system = { save_event_target_as = fmercsystem }
			}
		}
		FROM = {
			if = {
				limit = {
					exists = space_owner
					space_owner = { merc_needs_contact = yes }
				}
				space_owner = {
					country_event = { id = mercCommunications.98 days = 300 random = 600 }
					country_event = { id = mercCommunications.91 }
				}
				else = {
					random_fleet_in_system = {
						limit = {
							exists = owner
							owner = { merc_needs_contact = yes }
						}
						owner = {
							country_event = { id = mercCommunications.98 days = 300 random = 600 }
							country_event = { id = mercCommunications.91 }
						}
					}
				}
			}
		}
	}
}

# A default country fleet enters a system where the mercenary enclave
# has a station (or science ship), and they have not established
# communications. Allow the trigger to run anywhere, to catch mercenary
# outposts as well as the HQ, and the science ships.
# on_entering_system_fleet
fleet_event = {
	id = mercCommunications.96
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { merc_needs_contact = yes }
		FROM = { merc_has_presence = yes }
	}

	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			save_event_target_as = target_enclave
			random_owned_fleet = {
				limit = { merc_is_station = yes }
				solar_system = { save_event_target_as = fmercsystem }
			}
		}
		owner = {
			country_event = { id = mercCommunications.98 days = 300 random = 600 }
			country_event = { id = mercCommunications.91 }
		}
	}
}

# Chained from both on_entering_system_fleet events above
country_event = {
	id = mercCommunications.91
	title = merc.precommunications.title
	desc = merc.precommunications.desc
	picture = GFX_evt_star_chart
	location = FROM # FROM is fleet
	is_triggered_only = yes

	immediate = {
		set_relation_flag = {
			flag = ongoing_merc_enclave_investigation
			who = event_target:target_enclave
		}
	}

	option = {
		name = INTERESTING
		# Project needs to be created in the enclaves country scope, so that FROMFROM points
		# to the enclave in the special project event handlers
		event_target:target_enclave = {
			enable_special_project = {
				name = "INVESTIGATE_MERC_ENCLAVE"
				location = ROOT.capital_scope
				owner = ROOT
			}
		}
	}
}

# Enclaves make contact, delayed
country_event = {
	id = mercCommunications.98
	title = merc.communications.title
	desc = merc.communications.delayed.desc
	picture = GFX_evt_throne_room
	show_sound = event_radio_chatter
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = "fmerc_enclave"
			NOT = { has_communications = ROOT }
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = "fmerc_enclave"
				NOT = { has_communications = ROOT }
			}
			ROOT = { establish_communications_no_message = PREV }
		}
	}

	after = {
		if = {
			limit = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
			add_monthly_resource_mult = {
				resource = influence
				value = @tier1influencecontactxenophile
				min = @tier1influencecontactmin
				max = @tier1influencecontactmax
			}
			else = {
				add_monthly_resource_mult = {
					resource = influence
					value = @tier1influencecontact
					min = @tier1influencecontactmin
					max = @tier1influencecontactmax
				}
			}
		}
		hidden_effect = {
			event_target:target_enclave = { country_event = { id = mercCommunications.101 } }
		}
	}

	option = { name = "INTERESTING" }
}

# Communication Established, triggered by special project
country_event = {
	id = mercCommunications.99
	title = "merc.communications.title"
	desc = merc.communications.project.desc
	picture = GFX_evt_throne_room
	show_sound = event_radio_chatter
	is_triggered_only = yes

	immediate = {
		establish_communications_no_message = FROMFROM
	}

	after = {
		if = {
			limit = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
			add_monthly_resource_mult = {
				resource = influence
				value = @tier2influencecontactxenophile
				min = @tier2influencecontactmin
				max = @tier2influencecontactmax
			}
			else = {
				add_monthly_resource_mult = {
					resource = influence
					value = @tier2influencecontact
					min = @tier2influencecontactmin
					max = @tier2influencecontactmax
				}
			}
		}
		hidden_effect = {
			FROMFROM = { country_event = { id = mercCommunications.101 } }
		}
	}

	option = { name = "INTERESTING" }
}

# Triggered after special project completion or forced introduction
# This is just really so that the FROM scope in .102 can be the enclave,
# because it's used in the vanilla l10n strings
country_event = {
	id = mercCommunications.101
	hide_window = yes
	is_triggered_only = yes
	immediate = { FROM = { country_event = { id = mercCommunications.102 } } }
}

country_event = {
	id = mercCommunications.102
	title = merc.communications.title
	desc = merc.introduction.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_trader_window"
	custom_gui_option = "enclave_trader_option"

	picture_event_data = {
		portrait = FROM
		room = enclave_trader_room
	}

	option = { name = "leviathans.502.a" } # Well Met
}


###############################################################################
# Communication "spread"
#

event = {
	id = mercCommunications.1000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			country_event = { id = mercCommunications.1001 days = 14 random = 150 }
		}
	}
}

country_event = {
	id = mercCommunications.1001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		num_communications > 0
		NOT = { any_owned_fleet = { has_fleet_flag = "merc_exploration_fleet" } }
		count_country = {
			count > 0
			limit = {
				exists = this
				OR = {
					is_ai = no
					is_country_type = "default"
					is_country_type = "ascended_empire"
					is_country_type = "lost_empire"
					is_country_type = "ascended_hive_mind"
				}
				NOT = { has_communications = ROOT }
				NOT = { has_special_project = "INVESTIGATE_MERC_ENCLAVE" }
			}
		}
	}

	immediate = {
		log = "Mercenary Enclave spawning exploration fleet."
		random_owned_fleet = {
			limit = { merc_is_station = yes }
			save_event_target_as = spawn
		}
		if = { limit = { NOT = { exists = event_target:spawn } }
			break = yes
		}
		create_leader = {
			type = scientist
			sub_type = survey
			name = random
			species = owner_main_species
		}
		create_fleet = {
			name = "Mercenary Exploration"
			effect = {
				set_owner = ROOT
				create_ship = {
					name = "Enclave"
					design = "Mercenary Exploration"
					graphical_culture = "mammalian_01"
					prefix = no
				}
				set_location = event_target:spawn
				set_leader = last_created_leader
				set_fleet_flag = "merc_exploration_fleet"
				set_fleet_stance = passive
			}
		}
		last_created_fleet = { fleet_event = { id = mercCommunications.1010 } }
	}
}

fleet_event = {
	id = mercCommunications.1010
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		owner = {
			random_owned_fleet = {
				limit = { merc_is_station = yes }
				save_event_target_as = home
			}
		}
		queue_actions = {
			repeat = {
				max_iterations = 4
				find_random_system = {
					trigger = {
						id = mercScience.1
						exists = space_owner
						NOT = { is_same_value = ROOT.solar_system }
						space_owner = { NOT = { has_communications = ROOT.owner } }
					}
					found_system = { move_to = this }
				}
				repeat = {
					while = {
						id = mercScience.2
						NOT = { is_fleet_idle = yes }
					}
					wait = 14
				}
				find_random_planet = { found_planet = { orbit_planet = this } }
				repeat = {
					while = {
						id = mercScience.3
						NOT = { is_fleet_idle = yes }
					}
					wait = {
						duration = 14
						random = 60
					}
				}
			}
			move_to = event_target:home
			repeat = {
				while = {
					id = mercScience.4
					NOT = { is_fleet_idle = yes }
				}
				wait = 14
			}
			effect = {
				id = mercScience.5
				delete_fleet = ROOT
			}
		}
	}
}

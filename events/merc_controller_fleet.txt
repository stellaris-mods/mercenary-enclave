###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
# Copyright (c) 2018 stark43@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


namespace = mercControllerFleet

fleet_event = {
	id = mercControllerFleet.100
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		# Debug scope printing
		if = { limit = { has_global_flag = "debug" }
			target_scopes_log = yes
			print_scope_effect = yes
		}	
		
		merc_verify_current_target = yes
		
		if = { limit = { merc_is_target_valid = yes }
			owner = {
				merc_set_country = yes
							
				switch = {
					trigger = has_country_flag
					merc_op_dock = {
						log = "owner has merc_op_dock flag."
						ROOT = { merc_stage3_init_fleet = yes } }
					merc_op_liberate = {
						log = "owner has merc_op_liberate flag."
						ROOT = { merc_stage3_init_fleet_liberate = yes } }
					merc_op_spaceport = {
						log = "owner has merc_op_spaceport flag."
						ROOT = { merc_stage3_init_fleet = yes } }
					merc_op_civilian = {
						log = "owner has merc_op_civilian flag."
						ROOT = { merc_stage3_init_fleet = yes } }
					merc_op_military = {
						log = "owner has merc_op_military flag."
						ROOT = { merc_stage3_init_fleet = yes } }
					merc_op_clear = {
						log = "owner has merc_op_clear flag."
						ROOT = { merc_stage3_init_fleet = yes } }
				}
			}
		else = {
			log = "Target is not in any solar system, trying again in 30 days."
			fleet_event = { id = mercControllerFleet.100 days = 30 }
		} }
	}
}


fleet_event = {
	id = mercControllerFleet.200
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_fleet_flag = "merc_operations"
		owner = {
			NOT = { has_country_flag = "merc_op_dock" }
		}
	}
	# i have made separate fleet actions for liberation fleet, this will fix bordbadment issue
	immediate = {
		if = {
			limit = {
				owner = { NOT = { has_country_flag = "merc_op_liberate" } }	
			}
			#log = "mercControllerFleet.200 NO merc_op_liberate flag"

			owner = {
				random_country = {
					limit = {
						reverse_has_relation_flag = {
							who = PREV
							flag = merc_operations_target
						}
					}
					save_event_target_as = merc_country
				}
			}
			merc_fleet_maybe_go_hostile = yes	
		}
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
country_event = {
	id = mercControllerFleet.300
	hide_window = yes
	is_triggered_only = yes

	# Our operations fleet has been destroyed.
	trigger = {
		is_country_type = "fmerc_operations"
		# This event results in an endless loop because merc_stage4_failed can
		# chain to merc_stage4_destroy (depending on success %), which does
		# every_owned_fleet = { delete_fleet }, which triggers this again.
		# So the flag prevents that.
		FROMFROM = { NOT = { has_fleet_flag = "merc_op_ignore" } }
		count_owned_ships = { count = 0 }
	}
	immediate = {
		FROMFROM = {
			set_fleet_flag = "merc_op_ignore"
			solar_system = {
				set_timed_star_flag = {
					flag = "merc_deathzone"
					days = 5
				}
			}
		}
		set_country_flag = fleet_destroyed
		
		log = "mercControllerFleet.300 our fleet was destroyed"
		merc_stage4_failed = yes
	}
}
